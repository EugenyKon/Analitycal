"""
    2. Создайте собственный класс-исключение, обрабатывающий ситуацию деления на нуль. Проверьте его работу на данных,
    вводимых пользователем. При вводе пользователем нуля в качестве делителя программа должна корректно обработать
    эту ситуацию и не завершиться с ошибкой.
"""
# Определяется класс-исключение DivisionByZeroError,
# который будет использоваться для обработки ситуации деления на ноль.
# В конструкторе класса DivisionByZeroError
# определяется метод __init__, принимающий текстовое сообщение об ошибке.
class DivisionByZeroError(Exception):
    def __init__(self, txt):
        self.txt = txt

# Определяется функция smart_divider, которая выполняет деление двух чисел.
#  Внутри функции smart_divider проверяется, если делитель равен нулю,
#  то вызывается исключение DivisionByZeroError.
def smart_divider(a, b):
    if b == 0:
        raise DivisionByZeroError(f'{a} / {b} = Division By Zero Error!')
    return a / b

# В блоке try-except проверяется работа функции smart_divider при попытке деления на ноль.
# Если исключение DivisionByZeroError возникло, то выводится сообщение об ошибке.
try:
    smart_divider(6, 0)
except DivisionByZeroError as e:
    print(e)
# Производится деление чисел 42 на 6 с помощью функции smart_divider.
# Результат деления выводится на экран.
print(f"42 / 6 = {smart_divider(42, 6)}")