"""
    3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
    Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
    Класс-исключение должен контролировать типы данных элементов списка.

    Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам
    не остановит работу скрипта, введя, например, команду “stop”. При этом скрипт завершается,
    сформированный список выводится на экран.

    Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
    При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
    только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и
    отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.
"""

# Определяется класс-исключение NaNError,
# который будет использоваться для проверки содержимого списка на наличие только чисел.
class NaNError(Exception):
    # В конструкторе класса NaNError определяется метод __init__,
    # принимающий текстовое сообщение об ошибке.
    def __init__(self, txt):
        self.txt = txt

# Определяется функция number_filter, которая проверяет, является ли строка числом.
def number_filter(string):
    # Внутри функции number_filter проверяется,
    # является ли строка действительным числом или можно ли ее преобразовать в число.
    # Если строка представляет собой число или может быть преобразована в число, то она возвращается.
    if string.isdigit():
        return string
    else:
        try:
            float(string)
            return string
        # В случае возникновения исключения ValueError
        # (строка не является числом), генерируется исключение NaNError.
        except ValueError:
            raise NaNError(f'Error: {string} - is not a number')

# Инициализируются переменные input_txt, counter и numbers_list.
# Создается пустой список numbers_list, в который будут добавляться числа.
input_txt = ''
counter = 1
numbers_list = []
# Выводится сообщение с инструкцией для пользователя.
print("Введите числа по одному, для выхода введите 'stop'")
# В цикле while запрашивается ввод пользователя, пока он не введет слово "stop".
while input_txt != 'stop':
# В блоке try-except обрабатывается ввод пользователя.
# Вызывается функция number_filter для введенной строки.
    try:
        input_txt = input(f"{counter}: ")
        # Полученное значение добавляется в список numbers_list.
        numbers_list.append(number_filter(input_txt))
        # Увеличивается счетчик counter.
        counter += 1
        # При возникновении исключения NaNError, выводится сообщение об ошибке.
    except NaNError as e:
        # Если введенное значение не является "stop", выводится сообщение об ошибке.
        if input_txt != 'stop':
            print(e.txt)
# После завершения цикла ввода, выводится список чисел, введенных пользователем.
print(f"Result list:\n{numbers_list}")

# Результаты вычислений
Введите числа по одному, для выхода введите 'stop'
1: 3
2: 1
3: 5
4: stop
Result list:
['3', '1', '5']
